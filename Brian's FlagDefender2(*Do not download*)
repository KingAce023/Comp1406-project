import java.util.ArrayList;

public class FlagDefender extends Player{
  
  private static int player1 = 0;
  private static int player2 = 0;
//  private static boolean gone = false;
  Player chasingPlayer;
  Player playerWithFlag;
  ArrayList<Entity> chasingPlayerTeam; 
  ArrayList<Entity> opposingPlayerTeam; 
  
  public FlagDefender(Field f, int side, String name, int number, String team, char symbol, double x, double y){
    
    super(f, side, name, number, team, symbol, x, y);
    this.speedX = Math.random()*10-2;
    this.speedY = Math.random()*10-2;
  }
    
    @Override
  public  void update(Field field){
  }
    
    
    @Override
  public void play(Field field){
      
      boolean gone = false;
      
      chasingPlayer = (Player)field.getTeam1().get(player1);
      playerWithFlag = (Player)field.getTeam2().get(player2);
      
      chasingPlayerTeam = field.getTeam1();
      opposingPlayerTeam = field.getTeam2();
      
      // Checks for which team to use for each player.
      // This just avoids longer and uglier code. With this,
      // you don't need to implement the whole code below again 
      // if the player carrying the flag is in the other team (team2).
      
      if(field.pickUpFlag((Player)field.getTeam1().get(player1))){
        chasingPlayer = (Player)field.getTeam2().get(player1);
        playerWithFlag = (Player)field.getTeam1().get(player2);
        
        chasingPlayerTeam = field.getTeam2();
        opposingPlayerTeam = field.getTeam1();
      }
      
      // Checks if a player from other team picks up a flag.
      // If the player did not pick up our flag, player2++, that is,
      // it goes to the next player, and keeps on doing it till 
      // a player picks up the flag.
      // pickUpFlag (in class Field) already ensures that the
      // player in the input parameter is picking up the other
      // team's flag, so no need to check if it's picking up 
      // flag1 or flag2.
      if(field.pickUpFlag(playerWithFlag)){
        
        // If a player in the other team is with our flag
        // this checks if the current chasing player is
        // an instanceOf FlagDefender, if he isn't,
        // player1++ that is, it goes to the next player in 
        // the chasing player's team and keeps on checking.
        //  and the code below doesn't get to be implemented
        // until it finds a FlagDefender.
        // If the chasing player is a FlagDefender, 
        // It checks if anyone in chasing player's team 
        // is already going to catch 
        // the other team's player that's with the flag.
        // If no one in the team has already gone, then
        // the present chasing player goes to catch the 
        // other player, but if a player has already gone,
        // player1++, that is, it goes to the next player 
        // and that player repeats everything, that is, 
        // if it is a FlagDefender, it checks if anyone is
        // going to catch. If a player has already gone,
        // it also breaks out of the loop after player1++.
        if(chasingPlayer instanceof FlagDefender){
          
          // For loop checking if any of it players are already chasing or
          // going to catch the flag carrier.
          for(int i=0; i<chasingPlayerTeam.size(); i++){
            if(goingToCatch((Player)chasingPlayerTeam.get(i), playerWithFlag)){
              player1++;
              gone = true;
              break;
            }
          }
          if(gone == false){                               // If gone is false, meaning no other
                                                           // other player is going to catch the
            double xOfOpponent = playerWithFlag.getX();    // flag carrier, then the current 
            double yOfOpponent = playerWithFlag.getY();    // chasing player goes after the 
                                                           // player with the flag.
            double xOfChaser = chasingPlayer.x;
            double yOfChaser = chasingPlayer.y;
    
            double xDifference = xOfOpponent - xOfChaser;
            double yDifference = yOfOpponent - yOfChaser;
      
            double xSpeed = Math.abs(Math.cos(Math.atan(yDifference / xDifference))) * MAX_SPEED;
            double ySpeed = Math.abs(Math.sin(Math.atan(yDifference / xDifference))) * MAX_SPEED;
    
            if(xOfOpponent < chasingPlayer.x){
              chasingPlayer.speedX = -xSpeed;
            }
            if(xOfOpponent > chasingPlayer.x){
              chasingPlayer.speedX = xSpeed;
            }
      
            if(yOfOpponent < chasingPlayer.y){
              chasingPlayer.speedY = -ySpeed;
            }
            if(yOfOpponent > chasingPlayer.y){
              chasingPlayer.speedY = ySpeed;
            }
            
//            chasingPlayer.setSpeedX(chasingPlayer.speedX, this.id);
//            chasingPlayer.setSpeedY(chasingPlayer.speedY, this.id);
            
            if(chasingPlayer.catchOpponent(playerWithFlag, field)){       // If the player 
            chasingPlayer.speedX = playerWithFlag.getSpeedX(); // catches the flag
            chasingPlayer.speedY = playerWithFlag.getSpeedY(); // carrier, it sets its
            }                                                             // speed to the flag carrier's
            player1++;                                                    // speed.
                                                                          // *NOTE* The player that's
          }                                                               // been caught must go to jail
        }                                                                 // at this time as the chaser 
        else{                                                             // escorts it.
          player1++;
      }
      
      if(chasingPlayerTeam.size() == player1){  // If the index is out of bounds
        player1 = 0;                            // It gets reset to 0 so it continues
      }                                         // to loop through all players.
        
      }                                         // Same for player2
      else{
        player2++;
      }
      
      if(opposingPlayerTeam.size() == player2){ 
        player2 = 0;
      }
      
    }
    
    
    @Override
  protected void manageException(Field field){
    
    if(this.x + this.sprite.getWidth() > field.maxX){
      this.setX(field.maxX - this.sprite.getWidth(), this.id);
      
    }
    
    if(this.x < field.minX){
      this.setX(field.minX, this.id);
      
    }
    
    if(this.y + this.sprite.getWidth() > field.maxY){
      this.setY(field.maxY - this.sprite.getWidth(), this.id);
      
    }
    
    if(this.y < field.minY){
      this.setY(field.minY, this.id);
      
    }
    
  }
    
}
